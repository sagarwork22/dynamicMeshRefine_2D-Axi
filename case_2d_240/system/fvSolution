/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
   "alpha.*"
    {
        nAlphaCorr      2;
        nAlphaSubCycles 1;
        cAlpha          1;

        MULESCorr       yes;
        nLimiterIter    3;

        maxUnboundedness 1e-7;
        CoCoeff          2;
        maxIter          5;
        nLimiterIter     2;

        solver           PBiCG;
        preconditioner   DILU;
        tolerance        1e-12;
        relTol           1E-8;
    };
    pcorr
    {
	solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0;
        /*solver          GAMG;
        tolerance       1e-08;
        relTol          0;
        smoother        GaussSeidel;
        nPreSweeps      0;
        nPostSweeps     2;
        nFinestSweeps   2;
        cacheAgglomeration true;
        nCellsInCoarsestLevel 110;
        agglomerator    faceAreaPair;
        mergeLevels     1;*/
    }

 pcorrFinal
    {
	solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0;
        /*solver          GAMG;
        tolerance       1e-08;
        relTol          0;
        smoother        GaussSeidel;
        nPreSweeps      0;
        nPostSweeps     2;
        nFinestSweeps   2;
        cacheAgglomeration true;
        nCellsInCoarsestLevel 110;
        agglomerator    faceAreaPair;
        mergeLevels     1;*/
    }
    p_rgh
    {
	solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0;
        /*solver          GAMG;
        tolerance       1e-08;
        relTol          0.001;
        smoother        GaussSeidel;
        nPreSweeps      0;
        nPostSweeps     2;
        nFinestSweeps   2;
        cacheAgglomeration true;
        nCellsInCoarsestLevel 110;
        agglomerator    faceAreaPair;
        mergeLevels     1;*/
    }

T
    {
        solver          BICCG;
        preconditioner  DILU;
        tolerance       1e-07;
        relTol          0;
    }
TFinal
    {
        solver          BICCG;
        preconditioner  DILU;
        tolerance       1e-07;
        relTol          0;
    }


    p_rghFinal
    {
        $p_rgh;
        tolerance       1e-08;
        relTol          0;
    }

    U
    {
        solver          PBiCG;
        preconditioner  DILU;
        tolerance       1e-06;
        relTol          0;
    }
psi
    {
	solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0;
	/*solver           GAMG;
        tolerance        1e-07;
        relTol           0.9;

        smoother         GaussSeidel;
        nPreSweeps       0;
        nPostSweeps      2;
        nFinestSweeps    2;

        cacheAgglomeration false;
        nCellsInCoarsestLevel 380;
        agglomerator     faceAreaPair;
        mergeLevels      1;*/
}

}

PIMPLE
{
    momentumPredictor no;
    nCorrectors     3;
    nNonOrthogonalCorrectors 0;
    nAlphaCorr      1;
    nAlphaSubCycles 3;
    cAlpha          1;
    pRefCell            0;
    pRefValue           0;

}
PISO
{
    momentumPredictor no;
    nCorrectors     3;
    nNonOrthogonalCorrectors 0;
    nAlphaCorr      1;
    nAlphaSubCycles 3;
    cAlpha          1;
   

}

interfaceReconstruction
{
    interpolationMethod     inverseDistance;
   // interpolationMethod     linearFit; // gives better results on unstructured meshes
    smoothSym               no;     // smooth the curvature at symmetryPlanes
    distanceTreshold        0.0;    // important if dynamicMesh is used based on distance
    thinFilm                yes;    // do not delete nHat at Wall at SymmetryPlanes and if there is only a thin liquid or vapor film
}

// ************************************************************************* //
